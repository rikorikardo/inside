#!/usr/bin/env bash

source colors
[[ -e /etc/brand.conf ]] && source /etc/brand.conf
[[ -z $BRAND ]] && BRAND="Hive"

HIVEREPO_LIST=/etc/apt/sources.list.d/hiverepo.list

# pci.ids update source, otherwise download from web
PCIIDS=/hive/etc/pci.ids

[[ -f /hive-config/.DISKLESS_AMD && $(cat /proc/mounts | grep "/ " | awk '{print $1}') == tmpfs ]] && echo "${RED}Diskless rig. Selfupgrade restricted${NOCOLOR}" && exit 0

[[ -f $RIG_CONF ]] && source $RIG_CONF

#This will prevent asking interactive questions
export DEBIAN_FRONTEND=noninteractive
#If needed maybe there is even stronger option @see https://askubuntu.com/questions/146921/how-do-i-apt-get-y-dist-upgrade-without-a-grub-config-prompt
#sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade

function print_help {
	demourl="http://192.168.0.1/repo/binary"
	[[ -z $DEFAULT_REPO_URL ]] && DEFAULT_REPO_URL=`grep -m1 -oP "deb \K[^\s]+" /hive/etc/hiverepo.list`
	echo "${CYAN}Usage: selfupgrade [option] [repository URL] [version]${NOCOLOR}
Description:
  Tool for upgrading OS from $BRAND repository.
Options:
${GREEN}  -h|--help        ${NOCOLOR}to show current help
${GREEN}  -f|--force       ${NOCOLOR}to force upgrade by cleaning apt lists, caches and locks
                  it can help in situations when selfupgrade says 'System is up to date' but actually it isn't
${GREEN}  -g|--grub        ${NOCOLOR}to update only grub config
${GREEN}  -c|--consolefont ${NOCOLOR}to update console font
${GREEN}  repository URL   ${NOCOLOR}to get updates from; should start with http like ${demourl} or ${DEFAULT_REPO_URL}
${GREEN}  version          ${NOCOLOR}to upgrade or downgrade; should be used the following format x.y-zz, like 0.6-65
Examples:
${GREEN}  selfupgrade 0.6-65 ${demourl} -f ${NOCOLOR}
                  force upgrade/downgrade to version 0.6-65 from repository ${demourl}
"
}

#screen -wipe > /dev/null 2>&1

existing_repository_list=
function set_repo {
	local repository_list="deb $1 /"
	[[ -e $HIVEREPO_LIST ]] && existing_repository_list="$(< $HIVEREPO_LIST)"
	echo "${CYAN}> Using repository ${WHITE}$param${NOCOLOR}"
	echo "$repository_list" > $HIVEREPO_LIST
}


function restore_repo {
	if [[ ! -z "$existing_repository_list" && "$existing_repository_list" != "$(< $HIVEREPO_LIST)" ]]; then
		#echo "${CYAN}> Restoring old repository URLs${NOCOLOR}"
		echo "$existing_repository_list" > $HIVEREPO_LIST
	fi
}
# restore repo on any error
trap "restore_repo" EXIT


function update_grub {
	source /etc/default/grub
	new_params=()
	readarray -t params < <( grep -oP '^\K[^#\"\\]+' /hive/etc/grub.custom | tr [:space:] '\n' | grep -v '^$' )
	for param in "${params[@]}"; do
		[[ ! " $GRUB_CMDLINE_LINUX_DEFAULT " =~ " $param " ]] && new_params+=("$param")
	done
	if [[ "${#new_params[@]}" -gt 0 ]]; then
		echo "${YELLOW}> Using additional kernel boot parameters for grub${NOCOLOR}"
		echo "${new_params[@]}"
		new_cmdline="$GRUB_CMDLINE_LINUX_DEFAULT ${new_params[@]}"
		sed -ure "s/^GRUB_CMDLINE_LINUX_DEFAULT.+?/GRUB_CMDLINE_LINUX_DEFAULT=\"${new_cmdline}\"/g" -i /etc/default/grub
		return 0
	fi
	return 1
}


# Check config grub and create symlink
function check_grub {
	[[ ! -f /hive/etc/grub ]] && return 1

	#if [[ $(readlink /etc/default/grub) != "/hive/etc/grub" ]]; then
	#	rm /etc/default/grub #>/dev/null 2>&1
	#	ln -s /hive/etc/grub /etc/default/grub #>/dev/null 2>&1
	#fi

	# remove symlink
	readlink /etc/default/grub >/dev/null &&
		rm -f /etc/default/grub

	[[ -f /etc/default/grub ]] && grub="$(< /etc/default/grub)" || grub=

	# update grub config to default if needed
	diff -q /hive/etc/grub /etc/default/grub 2>/dev/null ||
		cp -f /hive/etc/grub /etc/default/grub

	[[ ! -f /hive/etc/grub.custom && -f /hive/etc/grub.custom.template ]] &&
		cp /hive/etc/grub.custom.template /hive/etc/grub.custom

	if [[ -f /hive/etc/grub.custom ]]; then
		( update_grub ) # in subshell
	fi

	[[ "$grub" == "$(< /etc/default/grub)" ]] && return 0
	echo "${CYAN}> Updating grub${NOCOLOR}"
	update-grub
	exitcode=$?
	echo "${YELLOW}System restart is required to get the effect${NOCOLOR}"
	return $exitcode
}


function stop_services {
	[[ $asw -ne 0 ]] && echo "${CYAN}> Stopping autoswitch${NOCOLOR}" && autoswitch stop > /dev/null 2>&1
	[[ $miners -ne 0 ]] && echo "${CYAN}> Stopping miners${NOCOLOR}" && miner stop
	autofan stop > /dev/null
}


function restore_services {
	echo "${CYAN}> Restarting autofan and watchdog${NOCOLOR}"
	wd restart
	autofan restart > /dev/null

	# in maintenance mode start miner if it was running
	if [[ $MAINTENANCE -eq 0 || ( $MAINTENANCE -eq 1 && $miners -eq 1 ) ]]; then
		echo "${CYAN}> Starting miners${NOCOLOR}"
		miner start
		if [[ $asw -ne 0 ]]; then
			echo "${CYAN}> Starting autoswitch${NOCOLOR}"
			nohup bash -c 'sleep 15 && autoswitch start' > /tmp/nohup.log 2>&1 &
		fi
	fi
}


VERSION=

for param in "$@"; do
	case "$param" in
		--help|-h)
			print_help
			exit 0
		;;
		--force|-f) # it can help in situations when selfupgrade says Hive is up to date but this is not true
			echo "${CYAN}> Cleaning apt lists${NOCOLOR}"
			# force HiveOS lists download
			rm -f /var/lib/apt/lists/*hiveos*
			# remove apt/dpkg lock files
			echo "${CYAN}> Removing apt/dpkg lock files and updates${NOCOLOR}"
			rm -f /var/lib/dpkg/lock*
			rm -f /var/lib/apt/lists/lock*
			rm -f /var/cache/apt/archives/lock*
			# remove partial updates
			rm -rf /var/lib/dpkg/updates/*
		;;

		--grub|-g)
			check_grub
			exit
		;;

		--consolefont|-c)
			if [[ -f /hive/etc/console-setup ]]; then
				setupcon # update current console
				[[ ! -f /etc/default/console-setup || "$(< /hive/etc/console-setup)" != "$(< /etc/default/console-setup)" ]] &&
					cp -f /hive/etc/console-setup /etc/default/console-setup &&
					update-initramfs -u # update boot image
			fi
			exit
		;;

		http*) #Set user repository
			set_repo "$param"
		;;

		*) # version
			VERSION="$param"
			if [[ ! -z "$VERSION" ]]; then
				[[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+-[0-9]+$ ]] &&
					echo "${YELLOW}Invalid version format \"$VERSION\"${NOCOLOR}" &&
					echo "Please use the following format x.y-zz, like 0.6-65" &&
					exit 1
				echo "${CYAN}> Upgrading to version ${YELLOW}$VERSION${NOCOLOR}"
			fi
		;;
	esac
done


# get current version
current_version=`dpkg -s hive | grep '^Version: ' | sed 's/Version: //'`
[[ -e /hive-config/RepoVer ]] && repover=$(< /hive-config/RepoVer) || repover=0
echo "${CYAN}> Current version: ${WHITE}$current_version@$repover${NOCOLOR}"

# remove stupid rep file for smaller updates
[[ -f /etc/apt/sources.list.d/amdgpu-pro.list ]] && rm /etc/apt/sources.list.d/amdgpu-pro.list

# remove avrdude conf file to exclude overwrite request
[[ -f /etc/avrdude.conf ]] && rm /etc/avrdude.conf

# save miner and autoswitch status
asw=$(screen -ls | grep -c autoswitch)
miner status > /dev/null && miners=1 || miners=0

# check available memory and stop miners in advance
if [[ $miners -eq 1 ]]; then
	mem=`free -b | grep "Mem" | awk '{print int($7/1024/1024)}'` || mem=0
	if [[ $mem -lt 250 ]]; then
		echo "${YELLOW}> Low memory available - $mem MB. Stopping miners${NOCOLOR}"
		stop_services
	fi
fi

# Sometimes Ubuntu fails to update repos
#dpkg --configure -a
hpkg fix
dexitcode=$? # we do not check it here. only return on exit to show a problem

hpkg update
exitcode=$?

if [[ $exitcode -eq 0 ]]; then
	if [[ -z "$VERSION" ]]; then # no target version
		updateavail=`apt list --upgradable 2>&1 | grep -c '^hive'`
		repover-touch
		if [[ $updateavail == 0 ]]; then
			# force hello and grub update even with no update
			check_grub
			hello
			[[ -e /hive-config/RepoVer ]] && newrepover=$(< /hive-config/RepoVer) || newrepover=0
			if [[ "$repover" != "$newrepover" ]]; then
				echo "${GREEN}Upgrade to ${WHITE}${current_version}@${newrepover}${GREEN} complete. Have a happy mining.${NOCOLOR}"
			else
				echo "${GREEN}System is up to date already${NOCOLOR}"
			fi
			restore_repo # Restore repository
			exit $dexitcode
		fi
	fi

	# Stop miners, autofan, autoswitch to prevent reboots during upgrade
	stop_services

	echo ------------------------------------------------------

	if [[ -z "$VERSION" ]]; then # normal upgrade to the latest available
		exitcode=0

		hive_extra_packages=""
		# check if hive-lib-dotnet is installed and if yes then add to checked packages
		dpkg -s hive-lib-dotnet > /dev/null 2>&1 &&
			hive_extra_packages="hive-lib-dotnet $hive_extra_packages"

		# Here should be listed all non-miner packages so that versions check will work
		apt-get install -y -f --only-upgrade hive hive-lib hive-opt hive-opt-algomap $hive_extra_packages
		aexitcode=$?
		[[ $aexitcode -ne 0 ]] && echo "${RED}(exitcode=$aexitcode)${NOCOLOR}"
		[[ $aexitcode -gt $exitcode ]] && exitcode=$aexitcode

		# Update root miners packages, maybe some versions will be uninstalled
		packages=$(hpkg getlist miners | grep -v '[0-9]')
		if [[ ! -z $packages ]]; then
			echo "${CYAN}> Checking miners packages${NOCOLOR}"
			apt-get install -y -f --only-upgrade $packages
			aexitcode=$?
			[[ $aexitcode -ne 0 ]] && echo "${RED}(exitcode=$aexitcode)${NOCOLOR}"
			[[ $aexitcode -gt $exitcode ]] && exitcode=$aexitcode
		fi

		# Update version miners packages
		packages=$(hpkg getlist miners | grep '[0-9]')
		if [[ ! -z $packages ]]; then
			echo "${CYAN}> Checking miners version packages${NOCOLOR}"
			apt-get install -y -f --only-upgrade $packages
			aexitcode=$?
			[[ $aexitcode -ne 0 ]] && echo "${RED}(exitcode=$aexitcode)${NOCOLOR}"
			[[ $aexitcode -gt $exitcode ]] && exitcode=$aexitcode
		fi
	else
		apt-get install -y -f --only-upgrade --allow-downgrades --reinstall hive=$VERSION
		exitcode=$?
		[[ $exitcode -ne 0 ]] && echo "${RED}(exitcode=$exitcode)${NOCOLOR}"
	fi
fi

echo ------------------------------------------------------

restore_repo # Restore repository

if [[ $exitcode -ne 0 ]]; then
	restore_services
	echo "${RED}Upgrade failed${NOCOLOR}"
	exit $exitcode
fi

# Save RepoVer
repover-touch

apt-get -y autoremove

# clean cached packages to save space
apt-get clean

# Reread env variables
source /etc/environment
export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file

# update Grub
check_grub

# update pci.ids from local source
if [[ -e $PCIIDS && $PCIIDS -nt /usr/share/misc/pci.ids ]]; then
	echo "${CYAN}> Updating pci.ids to version `grep -m 1 -oP "Version: \K.*" $PCIIDS`${NOCOLOR}"
	cp -f $PCIIDS /usr/share/misc/pci.ids
fi

#echo ------------------------------------------------------
screen -wipe > /dev/null 2>&1 # Wipe possible dead screen

# so reboot can be avoided in case it was updated
echo "${CYAN}> Running gpu-detect${NOCOLOR}"
gpu-detect listjson > $GPU_DETECT_JSON

# Moved from postinst again as hello need to see new version
#echo "${CYAN}> Saying hello to server again${NOCOLOR}"
hello nostart

# Restart agent
echo "${CYAN}> Restarting agent${NOCOLOR}"
agent-screen restart

# Restore other services
restore_services

# Restarting ROH Fan controller
if [[ `lsusb 2>/dev/null | grep -c 16c0:05dc` -ge 1 ]]; then
	screen -S octofan -X quit > /dev/null
	$OCTOFAN dontattach
fi

new_version=`dpkg -s hive | grep '^Version: ' | sed 's/Version: //'`
[[ -e /hive-config/RepoVer ]] && repover=$(< /hive-config/RepoVer) || repover=0

if [[ -z "$VERSION" || "$VERSION" == "$current_version" ]]; then
	echo "${GREEN}Upgrade to ${WHITE}$new_version@$repover${GREEN} complete. Have a happy mining.${NOCOLOR}"
else
	echo "${GREEN}Downgrade to ${WHITE}$new_version@$repover${GREEN} complete. Have a happy mining.${NOCOLOR}"
	echo "${YELLOW}Reboot is highly recommended after downgrade.${NOCOLOR}"
fi

exit $dexitcode
